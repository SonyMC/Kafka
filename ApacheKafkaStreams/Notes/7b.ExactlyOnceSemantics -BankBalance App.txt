Exactly Once Semantics
------------------------
BankBalanceApp:

1) Create a Kafka Proucer that outputs ~100 messages per seconds to a topic. Each message is random in money( a positive value) , and outputs evenly transactions for 6 customers. The data should look like:
	- {"name": "John", "amount": 123, "time": "2017-07-19T05:24:42"}

2) Create a KafkaStreams Application that takes these transactions and will compute the total money in their balance(the balance starts at $0), and teh latest time an update was received. As you guessed, the total money is not idempotent(sum), but latest time is(max).

3) Run the producer and Streams application 

4) Executing teh above 3 steps will give you an excatly once pipeline


BankBalance Kafka Producer :
	- Make sure to have a key representing the name of the customer in you rmessage
	- You may use the library JacksonDatabind to generate the json( or simply interpolating strings)
	





Starter Project Setup
-----------------------
- We will create a starter project with the required maven dependecies
	- Kafka Stream Client
	- Logging Libraries ( log 4j)
	- Maven plugins


- Open IntelliJ:

 
	- File -> New -> Project
		- New Project:
			- Name= bank-balance-exactly-once
			- Location = D:\OneDrive\Study\DevOps\Kafka\ApacheKafkaStreams\Project
			- Create GIT repository : Do not enable
			- Language : Java
			- Build System = Maven 
			- JDK = temurin-17
			- Add sample code
			- Advanced Settings : 
				- Group id = com.mailsonymathew.kafka.streams
				- Artifact id =  bank-balance-exactly-once
			


Code location:
	- D:\OneDrive\Study\DevOps\Kafka\ApacheKafkaStreams\Project\BANK-BALANCE-EXACTLY-ONCE





- Setup pom.xml
	- Add required dependencies


- Setup log4j.properties
	- src/main/resources


- Producer class:
	- BankTransactionsProducer.java

- BankBalanceExactlyOnceApp.java
		- Read one topic from Kafka(KStream)
		- GroupByKey, because your topic already has the right key! - no repartition happens
		- Aggregate, to compute the "bank balance"
		
	







********************




Running the Application
----------------------
Tip: In iIntellIj, to see return type of an expression, use ctrl+shift+P


- Running the Kafka Streams applicaiton can be done directly from IntelliJ
- Use the green arrow button on the top RHS corner to run the app and the stop button to stop it.





(1) Start Zookeeper and Kafka
		- cd D:\OneDrive\Study\DevOps\Kafka\KafkaBinary\kafka_2.13-3.3.1

	- Change permissions of folder to allow access to all users( Note: only for DEV ):
		- Right click on folder -> properties-> Security-> Users/Athelas -> Edit -> Allo = Full COntrol
	
	- Refer commands:
			- bank-balance.bat
					- D:\OneDrive\Study\DevOps\Kafka\ApacheKafkaStreams\Refer\code_v2\code\4-bank-balance

	- Open cmd
		- cd D:\OneDrive\Study\DevOps\Kafka\KafkaBinary\kafka_2.13-3.3.1
	
	-Start zookeeper 
		- cmd: bin\windows\zookeeper-server-start.bat config\zookeeper.properties
			-  Error : 'The input line is too long. The syntax of the command is incorrect'


	 - Open file 'kafka-run-class.bat' in editor
			- Refer : https://narayanatutorial.com/jms/apache-kafka/the-input-line-is-too-long-the-syntax-of-the-command-is-incorrect
			- Replace: 
for %%i in ("%BASE_DIR%\libs\*") do (
	call :concat "%%i"
)	


			- With:
	call :concat "%BASE_DIR%\libs\*;"


	- Close cmd console and try command again

	- Start Zookeeper:
		- Note: Zookeeper is used in older versionsof Kafka and we will not be requiring it here.	
		- - zookeeper is at localhost:2181		
		- cmd: cd D:\OneDrive\Study\DevOps\Kafka\KafkaBinary\kafka_2.13-3.3.1
		- cmd: bin\windows\zookeeper-server-start.bat config\zookeeper.properties
	
	- You should be seeing the following msg towards teh en din your powershell console:
		- INFO binding to port 0.0.0.0/0.0.0.0:2181 (org.apache.zookeeper.server.NIOServerCnxnFactory)

	- Start Kafka:
		- open another cmd console  shell 
			-  kafka is at localhost:9092		
			- cmd: bin\windows\kafka-server-start.bat config\server.properties	

		- You should see something like teh following:
[2023-01-16 14:23:05,887] INFO [KafkaServer id=0] started (kafka.server.KafkaServer)


	- Leave the two consoles for Zookeepr and KAfka running 


			
(2)Create input and outtput topics:  


- For older version of Kafka using Zookeeper:
	
Note: To know about 'cleanup.polcy=compact' parameter in below cmds , refer notes '3l.KStream & KTables - Refresher on Log Compaction.txt'
-
	(a) create input topic with one partition to get full ordering
			- cmd: bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic bank-transactions

	(b) create output log compacted topic:
			- bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic bank-balance-exactly-once --config cleanup.policy=compact



- For newer version of Kafka :

Note: To know about 'cleanup.polcy=compact' parameter in below cmds , refer notes '3l.KStream & KTables - Refresher on Log Compaction.txt'
	
	(a) create input topic with one partition to get full ordering
			- cmd: bin\windows\kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic bank-transactions

	(b) create output log compacted topic:
			- cmd: bin\windows\kafka-topics.bat --create --bootstrap-server localhost:9092 -replication-factor 1 --partitions 1 --topic bank-balance-exactly-once --config cleanup.policy=compact




(3)List topics:
	- Old version using Zookeeper:
		cmd: bin\windows\kafka-topics.bat --zookeeper localhost:2181 --list
	- Newer Version of Kafka that does not have Zookeeper
		cmd: bin\windows\kafka-topics.bat --bootstrap-server localhost:9092 --list
		- Note: We are following the newer version cmd( without zookeeper)
		- Response:
bank-balance-exactly-once
bank-transactions






(4)Launch a Kafka consumer

cmd: 
bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 ^
    --topic bank-balance-exactly-once ^
    --from-beginning ^
    --formatter kafka.tools.DefaultMessageFormatter ^
    --property print.key=true ^
    --property print.value=true ^
    --property key.deserializer=org.apache.kafka.common.serialization.StringDeserializer ^
    --property value.deserializer=org.apache.kafka.common.serialization.StringDeserializer


	- Response:
		- You will see blinking cursor which means consumer is waiting for a producer to provide it with data


(5) Launch  the Producer Application:
	- Click on BankTransactionsProducer.java
		- Click on Play button
		- The app wil start and you wil lsee log output in teh IntellIj console
		- Intellij console:
			- You will see batches being produced


(6) Launch the Streams application:
	- Click on BankBalanceExactlyOnceApp.java
		- Click on Play button
		- The app wil start 


(7) Go to consumer console :
		- You will see the output (i.e real time bank balance transactions)







(7) Graceful Shutodown of application :
	- Do a ctrl+C ot push the stop button in IntelliJ


(8) Restart apps:	
	- Will pick up exactly where it stopped