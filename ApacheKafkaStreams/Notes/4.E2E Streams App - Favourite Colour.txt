Objectives
----------
- Take a cooma delimited topic of userid, colour
	- Filter out bad data
	- Keep only colour of "green", "red", "blue"
- Get the running count of the favourite colurs overall and output this to a topic
- Note : A user's favourite colour can change 
	- E.g. 
		- Stephane, Blue 
		- John, Green
		- Stephane, Red( update)
		- Alicce , Red

	- Colour count for the above E.g. should be:
		- Blue = 0
		- Green -= 1
		- Red = 2

- To do:
	- Write topology
	- Start finding the right transformations to apply
	- Create input and output topics( and intermediary topics if you think on any)
	- Feed the sample data as a producer:
		- stephane, blue
		- john, green
		- stephane, red
		- alice, red


- Notes:
	- The input data does not have keys but represents updates
		- We should read it as a KStream and extract the key
		- We should write the result to Kafka ( as a log compacted topic)
	- The results can now be read as a KTable so that updates are correctly applied
	- We can now perform an aggregation on the kTable(groupBy then count)
	- And write the results back to Kafka


- Topology and Operations:
	(1) Read one topic from Kafka( KStream)
	(2) Filter bad values
	(3) SelectKey that will be the user id
	(4) MapValues to extract the colour( a slowercase)
	(5) Filter to remove bad colours
	(6) Write to Kafka as an intermediary topic
	(7) Read from Kafka as a KTable(Ktable)
	(8) GroupBy Colours
	(9) Count to count colours occurences(KTable)
	(10)Write to Kfka as a final topic


Starter Project Setup
-----------------------
- We will create a starter project with the required maven dependecies
	- Kafka Stream Client
	- Logging Libraries ( log 4j)
	- Maven plugins


- Open IntelliJ:

	- 
	- File -> New -> Project
		- New Project:
			- Name= favourite-colour-java
			- Location = D:\OneDrive\Study\DevOps\Kafka\ApacheKafkaStreams\Project
			- Create GIT repository : Do not enable
			- Language : Java
			- Build System = Maven 
			- JDK = temurin-17
			- Add sample code
			- Advanced Settings : 
				- Group id = com.mailsonymathew.kafka.streams
				- Artifact id =  favourite-colour-java
			


Code location:
	- D:\OneDrive\Study\DevOps\Kafka\ApacheKafkaStreams\Project\favourite-colour-java



Code reference:
	- favourite-colour-java
		- D:\OneDrive\Study\DevOps\Kafka\ApacheKafkaStreams\Refer\kafka-streams-course-2.0.0\favourite-colour-java

- Setup pom.xml
	- Add required dependencies


- Setup log4j.properties
	- src/main/resources

-Main class:
	- FavouriteColourApp.java



Running the Application
----------------------
Tip: In iIntellIj, to see return type of an expression, use ctrl+shift+P


- Running the Kafka Streams applicaiton can be done directly from IntelliJ
- Use the green arrow button on the top RHS corner to run the app and the stop button to stop it.





(1) Start Zookeeper and Kafka
		- cd D:\OneDrive\Study\DevOps\Kafka\KafkaBinary\kafka_2.13-3.3.1

	- Change permissions of folder to allow access to all users( Note: only for DEV ):
		- Right click on folder -> properties-> Security-> Users/Athelas -> Edit -> Allo = Full COntrol
	
	- Refer commands:
			- favourite-colour.bat
					- D:\OneDrive\Study\DevOps\Kafka\ApacheKafkaStreams\Refer\code_v2\code\3-favourite-colour

	- Open cmd
		- cd D:\OneDrive\Study\DevOps\Kafka\KafkaBinary\kafka_2.13-3.3.1
	
	-Start zookeeper 
		- cmd: bin\windows\zookeeper-server-start.bat config\zookeeper.properties
			-  Error : 'The input line is too long. The syntax of the command is incorrect'


	 - Open file 'kafka-run-class.bat' in editor
			- Refer : https://narayanatutorial.com/jms/apache-kafka/the-input-line-is-too-long-the-syntax-of-the-command-is-incorrect
			- Replace: 
for %%i in ("%BASE_DIR%\libs\*") do (
	call :concat "%%i"
)	


			- With:
	call :concat "%BASE_DIR%\libs\*;"


	- Close cmd console and try command again

	- Start Zookeeper:
		- Note: Zookeeper is used in older versionsof Kafka and we will not be requiring it here.	
		- - zookeeper is at localhost:2181		
		- cmd: cd D:\OneDrive\Study\DevOps\Kafka\KafkaBinary\kafka_2.13-3.3.1
		- cmd: bin\windows\zookeeper-server-start.bat config\zookeeper.properties
	
	- You should be seeing the following msg towards teh en din your powershell console:
		- INFO binding to port 0.0.0.0/0.0.0.0:2181 (org.apache.zookeeper.server.NIOServerCnxnFactory)

	- Start Kafka:
		- open another cmd console  shell 
			-  kafka is at localhost:9092		
			- cmd: bin\windows\kafka-server-start.bat config\server.properties	

		- You should see something like teh following:
[2023-01-16 14:23:05,887] INFO [KafkaServer id=0] started (kafka.server.KafkaServer)


	- Leave the two consoles for Zookeepr and KAfka running 


			
(2)Create the 3 topics(favourite-colour-input,user-keys-and-colours,favourite-colour-output) that we need:  


- For older version of Kafka using Zookeeper:
	
Note: To know about 'cleanup.polcy=compact' parameter in below cmds , refer notes '3l.KStream & KTables - Refresher on Log Compaction.txt'
-
	(a) create input topic with one partition to get full ordering
			- cmd: bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic favourite-colour-input

	(b) create intermediary log compacted topic:
			- cmd: bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic user-keys-and-colours --config cleanup.policy=compact

	(c) create output log compacted topic
			- cmd: bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic favourite-colour-output --config cleanup.policy=compact


- For newer version of Kafka :

Note: To know about 'cleanup.polcy=compact' parameter in below cmds , refer notes '3l.KStream & KTables - Refresher on Log Compaction.txt'
	
	(a) create input topic with one partition to get full ordering
			- cmd: bin\windows\kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic favourite-colour-input

	(b) create intermediary log compacted topic:
			- cmd: bin\windows\kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic user-keys-and-colours --config cleanup.policy=compact

	(c) create output log compacted topic
			- cmd: bin\windows\kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic favourite-colour-output --config cleanup.policy=compact






(3)List topics:
	- Old version using Zookeeper:
		cmd: bin\windows\kafka-topics.bat --zookeeper localhost:2181 --list
	- Newer Version of Kafka that does not have Zookeeper
		cmd: bin\windows\kafka-topics.bat --bootstrap-server localhost:9092 --list
		- Note: We are following the newer version cmd( without zookeeper)
		- Response:

favourite-colour-input
favourite-colour-output
user-keys-and-colours






(4)Launch a Kafka consumer

cmd: 
bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 ^
    --topic favourite-colour-output ^
    --from-beginning ^
    --formatter kafka.tools.DefaultMessageFormatter ^
    --property print.key=true ^
    --property print.value=true ^
    --property key.deserializer=org.apache.kafka.common.serialization.StringDeserializer ^
    --property value.deserializer=org.apache.kafka.common.serialization.LongDeserializer


	- Response:
		- You will see blinking cursor which means consumer is waiting for a producer to provide it with data


(5) Launch the streams application:
	- Click on FavouriteColourApp.java
		- Click on Play button
		- The app wil start and you wil lsee log output in teh IntellIj console




(6)Produce data to the topic 'favourite-colour-input':
	- cmd: bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic favourite-colour-input
	- Enter any data in the console:
			- >
stephane,blue
john,green
stephane,red
alice,red
alice,blue
cicily,magenta






(7)Go to your consumer console window and you can see the following:
blue    1
green   1
blue    0
red     1
red     2
red     1
blue    1

Note:
	-  You might need to do atleast a couple of entries in the producer console to see the result in the consumer works in batches.
	- The KTable automaticvally updates the colour count and filters out colurs that we did not pecify in the code(green,blue,red)

(7) Graceful Shutodown of application :
	- Do a ctrl+C ot push the stop button in IntelliJ
	- Response:
INFO stream-client [wordcount-application-90433819-2bc2-4e5a-9ca3-978ff7816e43] State transition from PENDING_SHUTDOWN to NOT_RUNNING (org.apache.kafka.streams.KafkaStreams:342) 
INFO stream-client [wordcount-application-90433819-2bc2-4e5a-9ca3-978ff7816e43] Streams client stopped completely (org.apache.kafka.streams.KafkaStreams:1451) 
